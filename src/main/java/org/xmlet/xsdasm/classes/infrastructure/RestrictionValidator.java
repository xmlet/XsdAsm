package org.xmlet.xsdasm.classes.infrastructure;

import java.util.List;

/**
 * The RestrictionValidator class that every fluent interface generated by XsdAsmFaster uses to validate their attribute
 * restrictions. This class doesn't validate the whitespace restriction.
 */
public final class RestrictionValidator {

    private RestrictionValidator() {}

    /**
     * Validates the number of fraction digits present in the {@code value} received.
     * @param fractionDigits The allowed number of fraction digits.
     * @param value The {@link Double} to be validated.
     */
    public static void validateFractionDigits(int fractionDigits, double value){
        if (value != ((int) value)){
            String doubleValue = String.valueOf(value);

            int numberOfFractionDigits = doubleValue.substring(doubleValue.indexOf(',')).length();

            if (numberOfFractionDigits > fractionDigits){
                throw new RestrictionViolationException("Violation of fractionDigits restriction, value should have a maximum of " + fractionDigits + " decimal places.");
            }
        }
    }

    /**
     * Validates the length of the received {@code string}.
     * @param length The exact value for the {@code string} length.
     * @param string The {@link String} to be validated.
     */
    public static void validateLength(int length, String string){
        if (string.length() != length){
            throw new RestrictionViolationException("Violation of length restriction, string should have exactly " + length + " characters.");
        }
    }

    /**
     * Validates the length of the received {@code list}.
     * @param length The exact value for the {@code list} length.
     * @param list The {@link List} to be validated.
     */
    public static void validateLength(int length, List list){
        if (list.size() != length){
            throw new RestrictionViolationException("Violation of length restriction, list should have exactly " + length + " elements.");
        }
    }

    /**
     * Validates if the received {@code value} is inferior to the maxExclusive restriction.
     * Example:
     *  maxExclusive = 5; value = 4.99999999 == validationSuccessful
     *  maxExclusive = 5; value = 5          == restrictionViolationException
     * @param maxExclusive The exclusive maximum value that {@code value} can take.
     * @param value The {@link Double} to be validated.
     */
    public static void validateMaxExclusive(double maxExclusive, double value){
        if (value >= maxExclusive){
            throw new RestrictionViolationException("Violation of maxExclusive restriction, value should be lesser than " + maxExclusive);
        }
    }

    /**
     * Validates if the received {@code value} is equal or inferior to the maxInclusive restriction.
     * Example:
     *  maxExclusive = 5; value = 4.99999999 == validationSuccessful
     *  maxExclusive = 5; value = 5          == validationSuccessful
     *  maxExclusive = 5; value = 5.00000001 == restrictionViolationException
     * @param maxInclusive The inclusive maximum value that {@code value} can take.
     * @param value The {@link Double} to be validated.
     */
    public static void validateMaxInclusive(double maxInclusive, double value){
        if (value > maxInclusive){
            throw new RestrictionViolationException("Violation of maxInclusive restriction, value should be lesser or equal to " + maxInclusive);
        }
    }

    /**
     * Validates the maximum length the received {@code string} can take.
     * @param maxLength The maximum length value.
     * @param string The {@link String} to be validated.
     */
    public static void validateMaxLength(int maxLength, String string){
        if (string.length() > maxLength){
            throw new RestrictionViolationException("Violation of maxLength restriction, string should have a max number of characters of " + maxLength);
        }
    }

    /**
     * Validates the maximum length the received {@code list} can take.
     * @param maxLength The maximum length value.
     * @param list The {@link List} to be validated.
     */
    public static void validateMaxLength(int maxLength, List list){
        if (list.size() > maxLength){
            throw new RestrictionViolationException("Violation of maxLength restriction, list should have a max number of items of " + maxLength);
        }
    }

    /**
     * Validates if the received {@code value} is superior to the minExclusive restriction.
     * Example:
     *  minExclusive = 0; value = 0           == restrictionViolationException
     *  minExclusive = 0; value = 0.00000001  == validationSuccessful
     * @param minExclusive The exclusive minimum value that {@code value} can take.
     * @param value The {@link Double} to be validated.
     */
    public static void validateMinExclusive(double minExclusive, double value){
        if (value <= minExclusive){
            throw new RestrictionViolationException("Violation of minExclusive restriction, value should be greater than " + minExclusive);
        }
    }

    /**
     * Validates if the received {@code value} is equal or superior to the minInclusive restriction.
     * Example:
     *  minInclusive = 0; value = -0.0000001  == restrictionViolationException
     *  minInclusive = 0; value = 0           == validationSuccessful
     *  minInclusive = 0; value = 0.00000001  == validationSuccessful
     * @param minInclusive The inclusive minimum value that {@code value} can take.
     * @param value The {@link Double} to be validated.
     */
    public static void validateMinInclusive(double minInclusive, double value){
        if (value < minInclusive){
            throw new RestrictionViolationException("Violation of minInclusive restriction, value should be greater or equal to " + minInclusive);
        }
    }

    /**
     * Validates the minimum value that the {@code string} can take.
     * @param minLength The minimum length value.
     * @param string The {@link String} to be validated.
     */
    public static void validateMinLength(int minLength, String string){
        if (string.length() < minLength){
            throw new RestrictionViolationException("Violation of minLength restriction, string should have a minimum number of characters of " + minLength);
        }
    }

    /**
     * Validates the minimum value that the {@code list} can take.
     * @param minLength The minimum length value.
     * @param list The {@link List} to be validated.
     */
    public static void validateMinLength(int minLength, List list){
        if (list.size() < minLength){
            throw new RestrictionViolationException("Violation of minLength restriction, list should have a minimum number of items of " + minLength);
        }
    }

    /**
     * Validates if the received {@code string} matches the pattern.
     * @param pattern The restriction pattern.
     * @param string The {@link String} that should match the restriction pattern.
     */
    public static void validatePattern(String pattern, String string){
        if (!string.replaceAll(pattern, "").equals(string)){
            throw new RestrictionViolationException("Violation of pattern restriction, the string doesn't math the acceptable pattern, which is " + pattern);
        }
    }

    /**
     * Validates the number of digits present in the received {@code value}.
     * @param totalDigits The number of total digits.
     * @param value The {@link Double} to be validated.
     */
    public static void validateTotalDigits(int totalDigits, double value){
        String doubleValue = String.valueOf(value);

        int numberOfDigits;

        if (value != ((int) value)){
            numberOfDigits = doubleValue.length() - 1;
        } else {
            numberOfDigits = doubleValue.length();
        }

        if (numberOfDigits != totalDigits){
            throw new RestrictionViolationException("Violation of fractionDigits restriction, value should have a exactly " + totalDigits + " decimal places.");
        }
    }
}
